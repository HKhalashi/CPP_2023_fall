// 938. Range Sum of BST
#include <iostream>

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if (!root) return 0; 
        
        if (root->val < low) {
            
            return rangeSumBST(root->right, low, high);
        } else if (root->val > high) {
            
            return rangeSumBST(root->left, low, high);
        } else {
            
            return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);
        }
    }
};


TreeNode* newNode(int value) {
    TreeNode* node = new TreeNode(value);
    return node;
}

int main() {
    
    TreeNode* root1 = newNode(10);
    root1->left = newNode(5);
    root1->left->left = newNode(3);
    root1->left->right = newNode(7);
    root1->right = newNode(15);
    root1->right->right = newNode(18);

    Solution sol;
    std::cout << "Sum in range [7, 15]: " << sol.rangeSumBST(root1, 7, 15) << std::endl; // expected output: 32
    
    TreeNode* root2 = newNode(10);
    root2->left = newNode(5);
    root2->left->left = newNode(3);
    root2->left->left->left = newNode(1);
    root2->left->right = newNode(7);
    root2->left->right->left = newNode(6);
    root2->right = newNode(15);
    root2->right->left = newNode(13);
    root2->right->right = newNode(18);

    std::cout << "Sum in range [6, 10]: " << sol.rangeSumBST(root2, 6, 10) << std::endl; // expected output: 23

    return 0;
}
