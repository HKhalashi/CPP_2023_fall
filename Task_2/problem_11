//207. Course Schedule 1
#include <iostream>
#include <vector>


class Solution {
public:
    bool canFinish(int numCourses, std::vector<std::vector<int>>& prerequisites) {
        std::vector<std::vector<int>> graph(numCourses);
        for (const auto& pre : prerequisites) {
            graph[pre[1]].push_back(pre[0]);
        }

        std::vector<bool> visited(numCourses, false), onPath(numCourses, false);
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i] && hasCycle(graph, i, visited, onPath)) {
                return false;
            }
        }
        return true;
    }

private:
    bool hasCycle(const std::vector<std::vector<int>>& graph, int node, std::vector<bool>& visited, std::vector<bool>& onPath) {
        if (visited[node]) return false;
        visited[node] = true;
        onPath[node] = true;

        for (int neighbor : graph[node]) {
            if (onPath[neighbor] || hasCycle(graph, neighbor, visited, onPath)) {
                return true;
            }
        }

        onPath[node] = false;
        return false;
    }
};

int main() {
    
    int numCourses1 = 2;
    std::vector<std::vector<int>> prerequisites1 = {{1, 0}};
    Solution sol1;
    std::cout << "Can Finish Courses (Test 1): " << sol1.canFinish(numCourses1, prerequisites1) << std::endl;  // expected output: true

    
    int numCourses2 = 2;
    std::vector<std::vector<int>> prerequisites2 = {{1, 0}, {0, 1}};
    Solution sol2;
    std::cout << "Can Finish Courses (Test 2): " << sol2.canFinish(numCourses2, prerequisites2) << std::endl;  // expected output: false

    return 0;
